import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Day4 {
	int intSpotOne;
	int intSpotTwo;
	int intSpotThree;
	int intSpotFour;
	int intSpotFive;
	int intSpotSix;
	
	public Day4 () {
		intSpotOne = 2;
		intSpotTwo = 3;
		intSpotThree = 1;
		intSpotFour = 8;
		intSpotFive = 3;
		intSpotSix = 2;
		
	}

	public static void main(String[] args) {
		Set<Integer> lstCorrectPassword = new HashSet<Integer>();
		Day4 objDay4 = new Day4();
		while (withinRange(objDay4)) {

			int intTrialPassword = getTrialPassword(objDay4);
			
			addTrialPasswordToSpots(objDay4, intTrialPassword);
			if (!isDecreasingCheck(objDay4) && isTwoAdjacent(objDay4)) {
				if (!is3Adjacent(objDay4.intSpotOne, objDay4.intSpotTwo, objDay4.intSpotThree)
						&& !is3Adjacent(objDay4.intSpotTwo, objDay4.intSpotThree, objDay4.intSpotFour)
						&& !is3Adjacent(objDay4.intSpotThree, objDay4.intSpotFour, objDay4.intSpotFive)
						&& !is3Adjacent(objDay4.intSpotFour, objDay4.intSpotFive, objDay4.intSpotSix)) {
					lstCorrectPassword.add(getPassword(objDay4));
				}else if (isOnly2Adjacent(objDay4)) {
					//System.out.println("intTrialPassword = " + intTrialPassword);
					lstCorrectPassword.add(getPassword(objDay4));
				}
				
				//System.out.println("FOUND = " + getPassword(objDay4));
			}
			
			
		
		}
		/*for (Integer i : lstCorrectPassword) {
			System.out.println("i = " + i);
		}*/
		System.out.println("lstCorrectPassword.size = " + lstCorrectPassword.size());
	}
	
	
	
	
	
	
	
	public static Boolean isDecreasingCheck(Day4 objDay4) {
		if (objDay4.intSpotOne <= objDay4.intSpotTwo
				&& objDay4.intSpotTwo <= objDay4.intSpotThree
				&& objDay4.intSpotThree <= objDay4.intSpotFour 
				&& objDay4.intSpotFour <= objDay4.intSpotFive
				&& objDay4.intSpotFive <= objDay4.intSpotSix) {
			return false;
		}
		return true;
	}
	
	public static Boolean isTwoAdjacent (Day4 objDay4) {
		
		if (objDay4.intSpotOne == objDay4.intSpotTwo
				|| objDay4.intSpotTwo == objDay4.intSpotThree
				|| objDay4.intSpotThree == objDay4.intSpotFour
				|| objDay4.intSpotFour == objDay4.intSpotFive
				|| objDay4.intSpotFive == objDay4.intSpotSix) {
			//return is3Adjacent(objDay4);
			return true;
		}
		return false;
	}
	
	public static Boolean isOnly2Adjacent (Day4 objDay4) {
		/*if ((objDay4.intSpotOne == objDay4.intSpotTwo && objDay4.intSpotTwo != objDay4.intSpotThree)
				|| (objDay4.intSpotTwo == objDay4.intSpotThree && objDay4.intSpotThree != objDay4.intSpotFour)
				|| (objDay4.intSpotThree == objDay4.intSpotFour && objDay4.intSpotFour != objDay4.intSpotFive)
				|| (objDay4.intSpotFour == objDay4.intSpotFive && objDay4.intSpotFive != objDay4.intSpotSix)){
			System.out.println("only 2 adjacent = " + getPassword(objDay4));
			if (objDay4.intSpotOne == objDay4.intSpotTwo && objDay4.intSpotTwo != objDay4.intSpotThree){
				if (objDay4.intSpotTwo == objDay4.intSpotThree && objDay4.intSpotThree != objDay4.intSpotFour){
					return true;	
				}
			}else if (objDay4.intSpotThree == objDay4.intSpotFour && objDay4.intSpotFour != objDay4.intSpotFive) {
				
			}
			
			if (objDay4.intSpotFour == objDay4.intSpotFive && objDay4.intSpotFive != objDay4.intSpotSix){
				System.out.println("3");
			}
			return true;
		}*/
		
		String strPassword = String.valueOf(getPassword(objDay4));
		Map<Character, Integer> mapCharDuplicateCount = new HashMap<Character, Integer>();
		char[] arrayChar = strPassword.toCharArray();
		for (int i = 0 ; i < arrayChar.length ; i ++) {
			if (mapCharDuplicateCount.get(arrayChar[i]) != null) {
				int intCount = mapCharDuplicateCount.get(arrayChar[i]);
				mapCharDuplicateCount.put(arrayChar[i], intCount++);
			}else {
				mapCharDuplicateCount.put(arrayChar[i], 1);
			}
		}
		
		for( int i : mapCharDuplicateCount.keySet()) {
			if ( i > 2) {
				return true;
			}
		}
		
		return false;
	}
	
	public static Boolean is3Adjacent (int int1, int int2, int int3) {
		if (int1 == int2 && int2 == int3) {
			return true;
		}
		return false;
	}
	
	public static Boolean withinRange (Day4 objDay4) {
		int strPasswordInput = getPassword(objDay4);
		if (strPasswordInput >= 231832 && strPasswordInput <= 767346) {
			return true;
		}
		return false;
	}
	
	public static int getTrialPassword (Day4 objDay4) {
		int intPassword = getPassword(objDay4);
		intPassword++;
		return intPassword;
	}
	
	public static void addTrialPasswordToSpots (Day4 objDay4, int intTrialPassword) {
		String strTrialPassword = String.valueOf(intTrialPassword);
		objDay4.intSpotOne = Integer.valueOf(strTrialPassword.substring(0,1));
		objDay4.intSpotTwo =  Integer.valueOf(strTrialPassword.substring(1,2));
		objDay4.intSpotThree =  Integer.valueOf(strTrialPassword.substring(2,3));
		objDay4.intSpotFour = Integer.valueOf(strTrialPassword.substring(3,4));
		objDay4.intSpotFive = Integer.valueOf(strTrialPassword.substring(4,5));
		objDay4.intSpotSix = Integer.valueOf(strTrialPassword.substring(5,6));
	}
	
	
	public static int getPassword (Day4 objDay4) {
		String strPassword = "" + objDay4.intSpotOne 
				+ objDay4.intSpotTwo 
				+ objDay4.intSpotThree
				+ objDay4.intSpotFour 
				+ objDay4.intSpotFive 
				+ objDay4.intSpotSix;
		return Integer.valueOf(strPassword);
	}
}
	
	

	

